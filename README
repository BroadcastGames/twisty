         Twisty, a text-adventure interpreter for Android.
         =================================================

What is this program?
---------------------

Twisty is a game interpreter for the Android operating system.
It allaws you to play "text adventures" on your mobile handset.

The z-machine is a virtual machine designed in 1979 by Infocom for
playing text adventures, and it has been re-implemented on nearly every
computer and PDA since then.  This application allows Android users to
play Infocom classics just as 'Zork', as well hundreds of newer text
adventures written in the last ten years or so.

You can find numerous z-machine games to download at
http://ifarchive.org.  We also recommend visiting
http://www.ifwiki.org for general information on Interactive Fiction.


History
-------

The codebase originally began as an Android Activity constructed
around a heavily-hacked port of 'zplet', an early lightweight
z-machine interpreter written for Java 1.0.

 *** This project is now undergoing a huge rewrite! ***

We are now attempting to use Android's Native Development Kit (NDK) to
make JNI calls to various VM-interpreters running as C libraries.
This should give us a 7x speed improvement, and also allow us to
support a wider range of z-machines (via 'nitfol'), glulx games (via
'glulxe') and perhaps even TADS or other interpreters.

Specifically, we're using the GlkJNI layer to provide an abstract UI to 
the various C interpreters.  GLK is a UI "abstraction layer" created by
Andrew Plotkin which can be implemented in any GUI toolkit, and GlkJNI
ports this abstraction to JNI via a set of java interfaces.  It then
provides an Android-specific implementation of those interfaces.  The
best C interpreters out there expect to use GLK for I/O, so this
allows us our pick of C interpreters.


Redistribution and Licensing
-----------------------------

Twisty is open source software, and is distributed as a whole under
the GPL v3 license.  It depends heavily on the GlkJNI project, which
is also under GPL v3; on 'nitfol', a z-machine interpreter, under the
GPL v2 (which we're releasing under a "later version", GPL v3); and
also on 'git', a Glulx interpreter, under an MIT license.  The
collective Twisty product is thus safely all GPLv3-able.

Three free, classic games are packaged with the application;  for
details on their licensing, see the LICENSE file.  (This doesn't
violate the GPL as far as we know, as these games aren't linked into
the code, nor are they necessary for the code to build or run.  They
are merely interpreted and provided for convenience to users.)

Patches are welcome!  Please mail us at twisty-dev@googlegroups.com.


Installing the .apk
-------------------

The latest .apk can be downloaded directly from Google Code and pushed
via 'adb install', or just grab it from Android Market.  :-) The .apk
has a few sample games built in, but you can also load any z3, z5, or
z8 came from the SDcard.


Building from Source
--------------------

** For Developers Only.  Warning:  this is complex!


A.  Prerequisites

 1. The Android SDK, unpacked and ready to go.  You can download the
 current SDK from http://developer.android.com/sdk.  After
 downloading, be sure to run ./tools/android and install 'version 1.6'
 of the API Platform, which is our baseline (so we can run on even the
 oldest, simplest devices).

 2. A working Eclipse installation (at least 3.5, "Galileo") with the
 latest Android Development tools plugin (ADT) installed. To download 
 the current ADT within Eclipse, open Preferences>Install/Update/Available
 Sites, and Add "https://dl-ssl.google.com/android/You/". eclipse will also
 need to provide a path to the SDK by opening Preferences>Android.

 3. The Android Native Development Kit (NDK) -- at least version r4 --
 unpacked somewhere.  This is the GCC toolchain set up to
 cross-compile for Android ARM chips.  Get it from
 http://developer.android.com/sdk/ndk

 4. A copy of the Twisty codebase -- which you must already have if
 you're reading this.  (Say, at location $TWISTY.)  To work on the
 2.0 rewrite be sure you're looking at the DEFAULT mercurial branch:
 run 'hg up -c DEFAULT' if unsure.


B.  Code Overview

The Twisty codebase contains the main Twisty "activity", a few sample
games, and some C interpreters that expect to use GLK for I/O.  The
Twisty activity is essentially a high-level consumer of GlkJNI.

The GlkJNI codebase contains 'glkjni' (the C code implementing
GLK), as well as specific java implementations of these interfaces.
The one we care about is 'roboglk', which maps the interfaces to
Android's UI.


C.  Building the C code

We're assuming your Twisty client is at $TWISTY, and your NDK unpacked
at $NDK.

To compile the core glkjni C code and the C interpreters into a single
shared library: 

   $ cd $TWISTY/twisty
   $ $NDK/ndk-build

After compilation, the final libtwistyterps.so will be automatically
dropped into $TWISTY/twisty/libs/armeabi/


D.  Building the Java code

Fire up Eclipse, and make sure you have the latest ADT installed at
pointed at your Android SDK directory.

 1. Start a new "generic project" and choose "Android project".  In
    the following dialog box, choose "based on existing source" and
    then select $TWISTY/twisty/.

 2. Now open the project's properties (Project->Properties) and choose
    "Java Build Path" from the list on the left.  Then choose the
    'Source' tab and press the 'Link Source' button.  Navigate to the
    'roboglk' directory at the top of twisty tree and and select that.
    It should now appear in the list with $TWISTY/src and
    $TWISTY/gen. Now select the 'Order and Export' tab and arrange the
    build class order from top to bottom as Twisty/roboglk,
    Twisty/src, Twisty/gen, and Android 1.6.  The box next to Android
    1.6 should be checked.

 3. In the same Project->Properties panel, choose 'Java Compiler' and
    make sure it's set to Java compliance level 1.6.


E.  Running Twisty in the Android Virtual Device (AVD)

 1. Twisty should now build correctly. To run it in an AVD, you must first
    configure an AVD. This can be done through the menu Window->Android SDK
    and AVD manager. Select 'Virtual devices' on the left, then press the
    'New' button to create a new entry. Add a name and specify the target as 
    'Android 1.6 - API level 4'. For SD card, you can make a new, blank card
    by just indicating the size, e.g., 64M. Finally, choose a skin. You may
    make more than one AVD. 

 2. To specify the AVD to run, select Run->Run Configuration. Select the 
    'target' tab, and then check the box next to your choice of AVD.

 3. Select 'Run'. The emulator should launch, report mounting of the SDcard,
    and then begin the Twisty activity.
