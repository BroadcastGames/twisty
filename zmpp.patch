diff -urbw zmpp-0.92_02/src/org/zmpp/blorb/BlorbImage.java twisty/src/org/zmpp/blorb/BlorbImage.java
--- zmpp-0.92_02/src/org/zmpp/blorb/BlorbImage.java	2007-03-27 21:53:49.000000000 -0700
+++ twisty/src/org/zmpp/blorb/BlorbImage.java	2007-11-18 20:37:00.000000000 -0800
@@ -22,8 +22,8 @@
  */
 package org.zmpp.blorb;
 
-import java.awt.Dimension;
-import java.awt.image.BufferedImage;
+import com.google.twisty.zplet.BufferedImage;
+import com.google.twisty.zplet.Dimension;
 
 /**
  * This class contains informations related to Blorb images and their
diff -urbw zmpp-0.92_02/src/org/zmpp/blorb/BlorbImages.java twisty/src/org/zmpp/blorb/BlorbImages.java
--- zmpp-0.92_02/src/org/zmpp/blorb/BlorbImages.java	2007-03-27 21:53:50.000000000 -0700
+++ twisty/src/org/zmpp/blorb/BlorbImages.java	2007-11-18 20:39:45.000000000 -0800
@@ -22,14 +22,11 @@
  */
 package org.zmpp.blorb;
 
-import java.awt.image.BufferedImage;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.HashMap;
 import java.util.Map;
 
-import javax.imageio.ImageIO;
-
 import org.zmpp.base.MemoryAccess;
 import org.zmpp.blorb.BlorbImage.Ratio;
 import org.zmpp.blorb.BlorbImage.Resolution;
@@ -38,6 +35,9 @@
 import org.zmpp.iff.Chunk;
 import org.zmpp.iff.FormChunk;
 
+import com.google.twisty.zplet.BufferedImage;
+import com.google.twisty.zplet.ImageIO;
+
 /**
  * This class implements the Image collection.
  * 
diff -urbw zmpp-0.92_02/src/org/zmpp/instructions/ExtendedInstruction.java twisty/src/org/zmpp/instructions/ExtendedInstruction.java
--- zmpp-0.92_02/src/org/zmpp/instructions/ExtendedInstruction.java	2007-03-27 21:53:49.000000000 -0700
+++ twisty/src/org/zmpp/instructions/ExtendedInstruction.java	2007-11-18 20:49:51.000000000 -0800
@@ -22,13 +22,13 @@
  */
 package org.zmpp.instructions;
 
-import java.awt.Dimension;
-
 import org.zmpp.base.MemoryAccess;
 import org.zmpp.vm.Machine;
 import org.zmpp.vm.PortableGameState;
 import org.zmpp.vm.ScreenModel;
 
+import com.google.twisty.zplet.Dimension;
+
 
 public class ExtendedInstruction extends AbstractInstruction {
 
diff -urbw zmpp-0.92_02/src/org/zmpp/media/PictureManager.java twisty/src/org/zmpp/media/PictureManager.java
--- zmpp-0.92_02/src/org/zmpp/media/PictureManager.java	2007-03-27 21:53:51.000000000 -0700
+++ twisty/src/org/zmpp/media/PictureManager.java	2007-11-18 20:48:38.000000000 -0800
@@ -22,10 +22,10 @@
  */
 package org.zmpp.media;
 
-import java.awt.Dimension;
-
 import org.zmpp.blorb.BlorbImage;
 
+import com.google.twisty.zplet.Dimension;
+
 public interface PictureManager {
 
   /**
diff -urbw zmpp-0.92_02/src/org/zmpp/media/PictureManagerImpl.java twisty/src/org/zmpp/media/PictureManagerImpl.java
--- zmpp-0.92_02/src/org/zmpp/media/PictureManagerImpl.java	2007-03-27 21:53:49.000000000 -0700
+++ twisty/src/org/zmpp/media/PictureManagerImpl.java	2007-11-18 20:48:54.000000000 -0800
@@ -22,11 +22,11 @@
  */
 package org.zmpp.media;
 
-import java.awt.Dimension;
-
 import org.zmpp.blorb.BlorbImage;
 import org.zmpp.vm.Machine;
 
+import com.google.twisty.zplet.Dimension;
+
 public class PictureManagerImpl implements PictureManager {
 
   private int release;
diff -urbw zmpp-0.92_02/src/org/zmpp/media/SoundSystemImpl.java twisty/src/org/zmpp/media/SoundSystemImpl.java
--- zmpp-0.92_02/src/org/zmpp/media/SoundSystemImpl.java	2007-03-27 21:53:50.000000000 -0700
+++ twisty/src/org/zmpp/media/SoundSystemImpl.java	2007-11-18 20:50:26.000000000 -0800
@@ -22,12 +22,13 @@
  */
 package org.zmpp.media;
 
-import java.awt.Toolkit;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 
 import org.zmpp.base.Interruptable;
 
+import com.google.twisty.zplet.Toolkit;
+
 /**
  * This class implements the SoundSystem interface. The implementation
  * is using a Java 5 thread executor which makes it very easy to
Only in zmpp-0.92_02/src/org/zmpp/swingui: AppletMachineFactory.java
Only in zmpp-0.92_02/src/org/zmpp/swingui: ApplicationMachineFactory.java
diff -urbw zmpp-0.92_02/src/org/zmpp/swingui/BottomWindow.java twisty/src/org/zmpp/swingui/BottomWindow.java
--- zmpp-0.92_02/src/org/zmpp/swingui/BottomWindow.java	2007-03-27 21:53:49.000000000 -0700
+++ twisty/src/org/zmpp/swingui/BottomWindow.java	2007-11-19 17:06:21.000000000 -0800
@@ -22,8 +22,8 @@
  */
 package org.zmpp.swingui;
 
-import java.awt.Color;
-import java.awt.Font;
+import com.google.twisty.zplet.Color;
+import com.google.twisty.zplet.Font;
 
 /**
  * This class implements the lower window of the standard Z-machine screen
diff -urbw zmpp-0.92_02/src/org/zmpp/swingui/Canvas.java twisty/src/org/zmpp/swingui/Canvas.java
--- zmpp-0.92_02/src/org/zmpp/swingui/Canvas.java	2007-03-27 21:53:49.000000000 -0700
+++ twisty/src/org/zmpp/swingui/Canvas.java	2007-11-19 10:01:11.000000000 -0800
@@ -22,9 +22,10 @@
  */
 package org.zmpp.swingui;
 
-import java.awt.Color;
-import java.awt.Font;
-import java.awt.image.BufferedImage;
+import com.google.twisty.zplet.BufferedImage;
+import com.google.twisty.zplet.Color;
+import com.google.twisty.zplet.Font;
+
 
 /**
  * This interface defines an abstract access to the Java graphics system
diff -urbw zmpp-0.92_02/src/org/zmpp/swingui/CanvasImpl.java twisty/src/org/zmpp/swingui/CanvasImpl.java
--- zmpp-0.92_02/src/org/zmpp/swingui/CanvasImpl.java	2007-03-27 21:53:48.000000000 -0700
+++ twisty/src/org/zmpp/swingui/CanvasImpl.java	2007-11-19 17:04:33.000000000 -0800
@@ -22,13 +22,12 @@
  */
 package org.zmpp.swingui;
 
-import java.awt.Color;
-import java.awt.Font;
-import java.awt.Graphics;
-import java.awt.Graphics2D;
-import java.awt.RenderingHints;
-import java.awt.image.BufferedImage;
-import java.awt.image.ImageObserver;
+import com.google.twisty.zplet.BufferedImage;
+import com.google.twisty.zplet.Color;
+import com.google.twisty.zplet.Font;
+import com.google.twisty.zplet.ImageObserver;
+import com.google.twisty.zplet.ZGraphics;
+
 
 /**
  * The implementation of the Canvas interface.
@@ -39,7 +38,7 @@
 public class CanvasImpl implements Canvas {
 
   private BufferedImage image;
-  private Graphics graphics;
+  private ZGraphics graphics;
   private ImageObserver observer;
   
   public CanvasImpl(BufferedImage image, ImageObserver observer,
@@ -50,9 +49,11 @@
     
     // activate antialiasing if set
     if (antialias) {
-      
+      // TODO: antialiasing?
+    	/*
       ((Graphics2D) graphics).setRenderingHint(RenderingHints.KEY_ANTIALIASING,
           RenderingHints.VALUE_ANTIALIAS_ON);
+          */
     }
     this.observer = observer;
   }
@@ -79,7 +80,7 @@
   
   public int getFontAscent(Font font) {
     
-    return graphics.getFontMetrics().getMaxAscent();
+    return graphics.getFontMetrics(font).getMaxAscent();
   }
   
   public int getCharWidth(Font font, char c) {
@@ -100,15 +101,13 @@
   public void fillRect(Color color, int left, int top, int width,
       int height) {
      
-    graphics.setColor(color);
-    graphics.fillRect(left, top, width, height);
+    graphics.fillRect(left, top, width, height, color);
   }
   
   public void drawString(Color color, Font font, int x, int y, String str) {
    
     graphics.setFont(font);
-    graphics.setColor(color);
-    graphics.drawString(str, x, y);
+    graphics.drawString(str, x, y, color);
   }
 
   /**
@@ -119,9 +118,8 @@
     int fontHeight = getFontHeight(font);
     graphics.copyArea(0, top + fontHeight, getWidth(),
                       height - fontHeight, 0, -fontHeight);
-    graphics.setColor(backColor);
     graphics.fillRect(0, top + height - fontHeight,
-                      getWidth(), fontHeight + 1);
+                      getWidth(), fontHeight + 1, backColor);
   }
 
   /**
@@ -133,14 +131,12 @@
     if (numPixels >= 0) {
       graphics.copyArea(left, top + numPixels, width,
                         height - numPixels, 0, -numPixels);
-      graphics.setColor(backColor);
       graphics.fillRect(left, top + height - numPixels,
-                        width, numPixels + 1);
+                        width, numPixels + 1, backColor);
     } else {
       
       graphics.copyArea(left, top, width, height - numPixels, 0, numPixels);
-      graphics.setColor(backColor);
-      graphics.fillRect(left, top, width, numPixels + 1);
+      graphics.fillRect(left, top, width, numPixels + 1, backColor);
     }
   }
   
diff -urbw zmpp-0.92_02/src/org/zmpp/swingui/ColorTranslator.java twisty/src/org/zmpp/swingui/ColorTranslator.java
--- zmpp-0.92_02/src/org/zmpp/swingui/ColorTranslator.java	2007-03-27 21:53:50.000000000 -0700
+++ twisty/src/org/zmpp/swingui/ColorTranslator.java	2007-11-19 11:13:20.000000000 -0800
@@ -22,7 +22,7 @@
  */
 package org.zmpp.swingui;
 
-import java.awt.Color;
+import com.google.twisty.zplet.Color;
 
 /**
  * This class translates color numbers into Java AWT Color objects. It
diff -urbw zmpp-0.92_02/src/org/zmpp/swingui/FileSaveGameDataStore.java twisty/src/org/zmpp/swingui/FileSaveGameDataStore.java
--- zmpp-0.92_02/src/org/zmpp/swingui/FileSaveGameDataStore.java	2007-03-27 21:53:51.000000000 -0700
+++ twisty/src/org/zmpp/swingui/FileSaveGameDataStore.java	2007-11-19 21:48:11.000000000 -0800
@@ -22,13 +22,10 @@
  */
 package org.zmpp.swingui;
 
-import java.awt.Component;
 import java.io.File;
 import java.io.IOException;
 import java.io.RandomAccessFile;
 
-import javax.swing.JFileChooser;
-
 import org.zmpp.base.DefaultMemoryAccess;
 import org.zmpp.iff.DefaultFormChunk;
 import org.zmpp.iff.FormChunk;
@@ -43,30 +40,31 @@
  */
 public class FileSaveGameDataStore implements SaveGameDataStore {
 
-  private Component parent;
-  
   /**
    * Constructor.
    * 
    * @param parent the parent component for the file dialog
    */
-  public FileSaveGameDataStore(Component parent) {
-    
-    this.parent = parent;
+  public FileSaveGameDataStore(Object ignored) {
   }
   
   /**
    * {@inheritDoc}
    */
   public boolean saveFormChunk(WritableFormChunk formchunk) {
-    
+    boolean chosen = true;
+    if (chosen) {
+	  /*
     File currentdir = new File(System.getProperty("user.dir"));    
     JFileChooser fileChooser = new JFileChooser(currentdir);
     fileChooser.setDialogTitle("Save game ...");
     
     if (fileChooser.showSaveDialog(parent) == JFileChooser.APPROVE_OPTION) {
-      
       File savefile = fileChooser.getSelectedFile();
+      */
+    	// TODO androidify this
+    	File savefile = new File("/tmp/twisty.sav");
+    	
       RandomAccessFile raf = null;
       try {
         
@@ -92,12 +90,18 @@
    */
   public FormChunk retrieveFormChunk() {
     
+	    boolean chosen = true;
+	    if (chosen) {
+	    	/*
     File currentdir = new File(System.getProperty("user.dir"));    
     JFileChooser fileChooser = new JFileChooser(currentdir);
     fileChooser.setDialogTitle("Restore game...");
     if (fileChooser.showOpenDialog(parent) == JFileChooser.APPROVE_OPTION) {
       
       File savefile = fileChooser.getSelectedFile();
+      */
+  	// TODO androidify this
+  	File savefile = new File("/tmp/twisty.sav");
       RandomAccessFile raf = null;
       try {
         
diff -urbw zmpp-0.92_02/src/org/zmpp/swingui/FontFactory.java twisty/src/org/zmpp/swingui/FontFactory.java
--- zmpp-0.92_02/src/org/zmpp/swingui/FontFactory.java	2007-03-27 21:53:49.000000000 -0700
+++ twisty/src/org/zmpp/swingui/FontFactory.java	2007-11-19 17:10:49.000000000 -0800
@@ -22,7 +22,7 @@
  */
 package org.zmpp.swingui;
 
-import java.awt.Font;
+import com.google.twisty.zplet.Font;
 
 import org.zmpp.vm.ScreenModel;
 
Only in zmpp-0.92_02/src/org/zmpp/swingui: GameInfoDialog.java
diff -urbw zmpp-0.92_02/src/org/zmpp/swingui/GameThread.java twisty/src/org/zmpp/swingui/GameThread.java
--- zmpp-0.92_02/src/org/zmpp/swingui/GameThread.java	2007-03-27 21:53:50.000000000 -0700
+++ twisty/src/org/zmpp/swingui/GameThread.java	2007-11-19 21:51:11.000000000 -0800
@@ -22,10 +22,6 @@
  */
 package org.zmpp.swingui;
 
-import java.awt.EventQueue;
-
-import javax.swing.JComponent;
-
 import org.zmpp.vm.Instruction;
 import org.zmpp.vm.Machine;
 import org.zmpp.vm.ScreenModel;
@@ -47,20 +43,6 @@
     screen.waitInitialized();  
     machine.start();
     
-    // on MacOS X, after running the thread keyboard input is suspended
-    // for some reason until you either change to another application and
-    // back or explicitly request the focus, therefore, do it here, it
-    // does no harm on other platforms
-    try {
-      EventQueue.invokeAndWait(new Runnable() {
-        
-        public void run() {
-          
-          ((JComponent) screen).requestFocusInWindow();
-        }
-      });
-    } catch (Exception ex) { }
-        
     while (machine.getCpu().isRunning()) {
       
       Instruction instr = machine.getCpu().nextStep();
diff -urbw zmpp-0.92_02/src/org/zmpp/swingui/LineEditor.java twisty/src/org/zmpp/swingui/LineEditor.java
--- zmpp-0.92_02/src/org/zmpp/swingui/LineEditor.java	2007-03-27 21:53:49.000000000 -0700
+++ twisty/src/org/zmpp/swingui/LineEditor.java	2007-11-19 23:14:29.000000000 -0800
@@ -22,8 +22,6 @@
  */
 package org.zmpp.swingui;
 
-import java.awt.event.MouseEvent;
-
 /**
  * An interface to define line editing functionality.
  * 
@@ -58,11 +56,4 @@
    * @return the input mode
    */
   boolean isInputMode();
-  
-  /**
-   * Returns the last mouse event.
-   * 
-   * @return the last mouse event0
-   */
-  MouseEvent getLastMouseEvent();
 }
diff -urbw zmpp-0.92_02/src/org/zmpp/swingui/LineEditorImpl.java twisty/src/org/zmpp/swingui/LineEditorImpl.java
--- zmpp-0.92_02/src/org/zmpp/swingui/LineEditorImpl.java	2007-03-27 21:53:50.000000000 -0700
+++ twisty/src/org/zmpp/swingui/LineEditorImpl.java	2007-11-19 23:47:48.000000000 -0800
@@ -22,27 +22,21 @@
  */
 package org.zmpp.swingui;
 
-import java.awt.event.KeyEvent;
-import java.awt.event.KeyListener;
-import java.awt.event.MouseEvent;
-import java.awt.event.MouseListener;
-import java.awt.event.MouseMotionListener;
 import java.util.LinkedList;
 import java.util.List;
 
 import org.zmpp.encoding.ZsciiEncoding;
 import org.zmpp.vm.StoryFileHeader;
 
-public class LineEditorImpl implements LineEditor, KeyListener, MouseListener,
-MouseMotionListener {
+import android.view.KeyEvent;
+
+public class LineEditorImpl implements LineEditor {
 
   private boolean inputmode;
   private List<Short> editbuffer;
   private StoryFileHeader fileheader;
   private ZsciiEncoding encoding;
   
-  private MouseEvent lastMouseEvent;
-  
   public LineEditorImpl(StoryFileHeader fileheader, ZsciiEncoding encoding) {
   
     this.fileheader = fileheader;
@@ -98,22 +92,13 @@
     }
   }
 
-  /**
-   * {@inheritDoc}
-   */
-  public MouseEvent getLastMouseEvent() {
-    
-    return lastMouseEvent;
-  }
-  
   public void keyPressed(KeyEvent e) {
 
     switch (e.getKeyCode()) {
-      case KeyEvent.VK_BACK_SPACE:
-      case KeyEvent.VK_DELETE:
+      case KeyEvent.KEYCODE_DEL:
         addToBuffer(ZsciiEncoding.DELETE);
         break;
-      case KeyEvent.VK_SPACE:
+      case KeyEvent.KEYCODE_SPACE:
         addToBuffer((short) ' ');
         break;
     }
@@ -121,7 +106,7 @@
   
   public void keyTyped(KeyEvent e) {
   
-    char c = e.getKeyChar();
+    char c = 0;  // TODO e.getKeyChar();
     
     if (encoding.isConvertableToZscii(c)
         && !handledInKeyPressed(c)) {
@@ -133,21 +118,18 @@
   public void keyReleased(KeyEvent e) {
     
     switch (e.getKeyCode()) {
-      case KeyEvent.VK_UP:
+      case KeyEvent.KEYCODE_DPAD_UP:
         addToBuffer(ZsciiEncoding.CURSOR_UP);
         break;
-      case KeyEvent.VK_DOWN:
+      case KeyEvent.KEYCODE_DPAD_DOWN:
         addToBuffer(ZsciiEncoding.CURSOR_DOWN);
         break;
-      case KeyEvent.VK_LEFT:
+      case KeyEvent.KEYCODE_DPAD_LEFT:
         addToBuffer(ZsciiEncoding.CURSOR_LEFT);
         break;
-      case KeyEvent.VK_RIGHT:
+      case KeyEvent.KEYCODE_DPAD_RIGHT:
         addToBuffer(ZsciiEncoding.CURSOR_RIGHT);
         break;
-      case KeyEvent.VK_ESCAPE:
-        addToBuffer(ZsciiEncoding.ESCAPE);
-        break;
     }
   }
 
@@ -165,61 +147,7 @@
   
   private boolean handledInKeyPressed(char c) {
     
-    return c == ' ' || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE;
-  }
-  
-  public void mouseClicked(MouseEvent e) {
-    
-    //System.out.printf("mouseClicked(),  use mouse: %b, x: %d y: %d\n", useMouse(),
-    //    e.getX(), e.getY());
-    // Only if mouse is used
-    if (useMouse()) {
-      
-      fileheader.setMouseCoordinates(e.getX() + 1, e.getY() + 1);
-      
-      // Store single clicks and double clicks with different codes
-      addToBuffer((short) ((e.getClickCount() == 1) ?
-          ZsciiEncoding.MOUSE_SINGLE_CLICK :
-          ZsciiEncoding.MOUSE_DOUBLE_CLICK)); 
+    return c == KeyEvent.KEYCODE_SPACE || c == KeyEvent.KEYCODE_DEL;
     }
-    lastMouseEvent = e;
-  }
-  
-  /**
-   * Returns true if the game should recognize the mouse.
-   * 
-   * @return the mouse
-   */
-  private boolean useMouse() {
   
-    return fileheader.isEnabled(StoryFileHeader.Attribute.USE_MOUSE)
-      || fileheader.getVersion() == 6;
-  }
-  
-  public void mouseEntered(MouseEvent e) {
-    
-    lastMouseEvent = e;
-  }
-  public void mouseExited(MouseEvent e) {
-    
-    lastMouseEvent = e;
-  }
-  public void mousePressed(MouseEvent e) { 
-    
-    lastMouseEvent = e;
-  }
-  public void mouseReleased(MouseEvent e) {
-    
-    lastMouseEvent = e;
-  }
-  
-  public void mouseMoved(MouseEvent e) {
-    
-    lastMouseEvent = e;
-  }
-  
-  public void mouseDragged(MouseEvent e) {
-    
-    lastMouseEvent = e;
-  }  
 }
Only in zmpp-0.92_02/src/org/zmpp/swingui: Main.java
Only in zmpp-0.92_02/src/org/zmpp/swingui: PictureLabel.java
Only in zmpp-0.92_02/src/org/zmpp/swingui: PreferencesDialog.java
diff -urbw zmpp-0.92_02/src/org/zmpp/swingui/ScreenFont.java twisty/src/org/zmpp/swingui/ScreenFont.java
--- zmpp-0.92_02/src/org/zmpp/swingui/ScreenFont.java	2007-03-27 21:53:49.000000000 -0700
+++ twisty/src/org/zmpp/swingui/ScreenFont.java	2007-11-19 11:12:09.000000000 -0800
@@ -22,7 +22,7 @@
  */
 package org.zmpp.swingui;
 
-import java.awt.Font;
+import com.google.twisty.zplet.Font;
 
 /**
  * ScreenFont encapsulates all aspects of a font in the Z-machine, namely
diff -urbw zmpp-0.92_02/src/org/zmpp/swingui/SubWindow.java twisty/src/org/zmpp/swingui/SubWindow.java
--- zmpp-0.92_02/src/org/zmpp/swingui/SubWindow.java	2007-03-27 21:53:49.000000000 -0700
+++ twisty/src/org/zmpp/swingui/SubWindow.java	2007-11-18 22:52:09.000000000 -0800
@@ -22,12 +22,12 @@
  */
 package org.zmpp.swingui;
 
-import java.awt.Color;
-import java.awt.Font;
-
 import org.zmpp.vm.ScreenModel;
 import org.zmpp.vm.TextCursor;
 
+import com.google.twisty.zplet.Color;
+import com.google.twisty.zplet.Font;
+
 /**
  * The class SubWindow manages a sub window within the screen model.
  * 
diff -urbw zmpp-0.92_02/src/org/zmpp/swingui/TextViewport.java twisty/src/org/zmpp/swingui/TextViewport.java
--- zmpp-0.92_02/src/org/zmpp/swingui/TextViewport.java	2007-03-27 21:53:50.000000000 -0700
+++ twisty/src/org/zmpp/swingui/TextViewport.java	2007-11-19 17:02:14.000000000 -0800
@@ -22,14 +22,6 @@
  */
 package org.zmpp.swingui;
 
-import java.awt.Color;
-import java.awt.EventQueue;
-import java.awt.Font;
-import java.awt.FontMetrics;
-import java.awt.Graphics;
-import java.awt.image.BufferedImage;
-
-import javax.swing.JComponent;
 
 import org.zmpp.io.OutputStream;
 import org.zmpp.vm.Machine;
@@ -38,6 +30,13 @@
 import org.zmpp.vm.TextCursor;
 import org.zmpp.vm.StoryFileHeader.Attribute;
 
+import com.google.twisty.zplet.BufferedImage;
+import com.google.twisty.zplet.Color;
+import com.google.twisty.zplet.Font;
+import com.google.twisty.zplet.FontMetrics;
+import com.google.twisty.zplet.JComponent;
+import com.google.twisty.zplet.ZGraphics;
+
 /**
  * This class is a custom text component, rendering is handled by this class.
  * As opposed to former versions, this inherits from JComponent, so it is
@@ -251,7 +250,7 @@
     }
   }
   
-  protected void paintComponent(Graphics g) {
+  protected void paintComponent(ZGraphics g) {
     
     if (imageBuffer == null) {
       
@@ -275,14 +274,13 @@
 
       activeWindow = WINDOW_BOTTOM;
 
-      Graphics g_img = imageBuffer.getGraphics();
+      ZGraphics g_img = imageBuffer.getGraphics();
       resizeWindows(0);
       windows[WINDOW_TOP].resetCursorToHome();
       windows[WINDOW_BOTTOM].resetCursorToHome();
       setScreenProperties();
       
-      g_img.setColor(ColorTranslator.getInstance().translate(defaultBackground));
-      g_img.fillRect(0, 0, getWidth(), getHeight());
+      g_img.fillRect(0, 0, getWidth(), getHeight(), ColorTranslator.getInstance().translate(defaultBackground));
       windows[WINDOW_TOP].setBackground(defaultBackground);
       windows[WINDOW_TOP].setForeground(defaultForeground);
       windows[WINDOW_BOTTOM].setBackground(defaultBackground);
@@ -296,11 +294,10 @@
     if (DEBUG) {
       
       // Draw separator lines
-      g.setColor(Color.BLACK);
       g.drawLine(0, windows[WINDOW_TOP].getHeight() - 1, getWidth(),
-                 windows[WINDOW_TOP].getHeight() - 1);
+                 windows[WINDOW_TOP].getHeight() - 1, Color.BLACK);
       g.drawLine(0, 180 + windows[WINDOW_BOTTOM].getHeight() - 1, getWidth(),
-          180 + windows[WINDOW_BOTTOM].getHeight() - 1);
+          180 + windows[WINDOW_BOTTOM].getHeight() - 1, Color.BLACK);
     }
   }
   
@@ -471,8 +468,8 @@
 
   
   private void repaintInUiThread() {
-    
-    try {
+    // TODO: invalidate
+/*    try {
       
       EventQueue.invokeAndWait(new Runnable() {
         
@@ -489,7 +486,7 @@
     } catch (Exception ex) {
       
       ex.printStackTrace();
-    }
+    }*/
   }
   
   private void overrideDefaults(StoryFileHeader fileheader) {
diff -urbw zmpp-0.92_02/src/org/zmpp/swingui/TopWindow.java twisty/src/org/zmpp/swingui/TopWindow.java
--- zmpp-0.92_02/src/org/zmpp/swingui/TopWindow.java	2007-03-27 21:53:49.000000000 -0700
+++ twisty/src/org/zmpp/swingui/TopWindow.java	2007-11-20 08:28:26.000000000 -0800
@@ -22,7 +22,7 @@
  */
 package org.zmpp.swingui;
 
-import java.awt.Font;
+import com.google.twisty.zplet.Font;
 
 /**
  * This class implements the upper window of the standard Z-machine screen
diff -urbw zmpp-0.92_02/src/org/zmpp/swingui/Viewport6.java twisty/src/org/zmpp/swingui/Viewport6.java
--- zmpp-0.92_02/src/org/zmpp/swingui/Viewport6.java	2007-03-27 21:53:48.000000000 -0700
+++ twisty/src/org/zmpp/swingui/Viewport6.java	2007-11-20 08:27:38.000000000 -0800
@@ -22,14 +22,12 @@
  */
 package org.zmpp.swingui;
 
-import java.awt.Color;
-import java.awt.EventQueue;
-import java.awt.Font;
-import java.awt.Graphics;
-import java.awt.event.MouseEvent;
-import java.awt.image.BufferedImage;
+import com.google.twisty.zplet.Color;
+import com.google.twisty.zplet.Font;
+import com.google.twisty.zplet.ZGraphics;
+import com.google.twisty.zplet.BufferedImage;
 
-import javax.swing.JComponent;
+import com.google.twisty.zplet.JComponent;
 
 import org.zmpp.base.MemoryAccess;
 import org.zmpp.encoding.ZsciiString;
@@ -285,7 +283,8 @@
    * {@inheritDoc}
    */
   public void readMouse(int array) {
-
+	  // TODO mouse faking
+	  /*
     MouseEvent event = editor.getLastMouseEvent();
     MemoryAccess memaccess = machine.getGameData().getMemoryAccess();
     int buttonmask  = 0;
@@ -305,6 +304,7 @@
     memaccess.writeUnsignedShort(array + 2, event.getX() + 1);
     memaccess.writeUnsignedShort(array + 4, buttonmask);
     // TODO: Menu items
+     */
   }
   
   // ********************************************************************
@@ -314,7 +314,7 @@
   /**
    * {@inheritDoc}
    */
-  public void paintComponent(Graphics g) {
+  public void paintComponent(ZGraphics g) {
 
     if (imageBuffer == null) {
       
@@ -335,11 +335,10 @@
       windows[0].setSize(getHeight(), getWidth());
       windows[1].setSize(0, getWidth());
       
-      Graphics g_img = imageBuffer.getGraphics();
+      ZGraphics g_img = imageBuffer.getGraphics();
       Color bgcolor =
         ColorTranslator.getInstance().translate(defaultBackground);
-      g_img.setColor(bgcolor);
-      g_img.fillRect(0, 0, getWidth(), getHeight());
+      g_img.fillRect(0, 0, getWidth(), getHeight(), bgcolor);
       
       setScreenProperties();
       
@@ -411,7 +410,7 @@
    * Synchronizes the repaint action to the UI thread.
    */
   private void repaintInUiThread() {
-    
+    /*
     try {
       
       EventQueue.invokeAndWait(new Runnable() {
@@ -430,5 +429,7 @@
       
       ex.printStackTrace();
     }
+    */
+	 // TODO androidify
   }  
 }
diff -urbw zmpp-0.92_02/src/org/zmpp/swingui/Window6Impl.java twisty/src/org/zmpp/swingui/Window6Impl.java
--- zmpp-0.92_02/src/org/zmpp/swingui/Window6Impl.java	2007-03-27 21:53:49.000000000 -0700
+++ twisty/src/org/zmpp/swingui/Window6Impl.java	2007-11-19 10:58:58.000000000 -0800
@@ -22,9 +22,9 @@
  */
 package org.zmpp.swingui;
 
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.Font;
+import com.google.twisty.zplet.Color;
+import com.google.twisty.zplet.Dimension;
+import com.google.twisty.zplet.Font;
 
 import org.zmpp.blorb.BlorbImage;
 import org.zmpp.vm.StoryFileHeader;
diff -urbw zmpp-0.92_02/src/org/zmpp/swingui/WindowArea.java twisty/src/org/zmpp/swingui/WindowArea.java
--- zmpp-0.92_02/src/org/zmpp/swingui/WindowArea.java	2007-03-27 21:53:51.000000000 -0700
+++ twisty/src/org/zmpp/swingui/WindowArea.java	2007-11-19 10:58:42.000000000 -0800
@@ -22,7 +22,7 @@
  */
 package org.zmpp.swingui;
 
-import java.awt.Color;
+import com.google.twisty.zplet.Color;
 
 import org.zmpp.vm.Window6;
 
diff -urbw zmpp-0.92_02/src/org/zmpp/swingui/WordWrapper.java twisty/src/org/zmpp/swingui/WordWrapper.java
--- zmpp-0.92_02/src/org/zmpp/swingui/WordWrapper.java	2007-03-27 21:53:51.000000000 -0700
+++ twisty/src/org/zmpp/swingui/WordWrapper.java	2007-11-19 10:58:18.000000000 -0800
@@ -22,11 +22,12 @@
  */
 package org.zmpp.swingui;
 
-import java.awt.Font;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.StringTokenizer;
 
+import com.google.twisty.zplet.Font;
+
 /**
  * A WordWrapper object lines out a given string using the specified algorithm.
  * If buffered, whole words will be wrapped to the next line if too long,
Only in zmpp-0.92_02/src/org/zmpp/swingui: ZmppApplet.java
Only in zmpp-0.92_02/src/org/zmpp/swingui: ZmppFrame.java
