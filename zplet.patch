Only in zplet.new/src/russotto/: .svn
Only in zplet.new/src/russotto/iff: .svn
diff -urbw zplet.20060707/src/russotto/iff/IFFChunkNotFoundException.java zplet.new/src/russotto/iff/IFFChunkNotFoundException.java
--- zplet.20060707/src/russotto/iff/IFFChunkNotFoundException.java	2001-02-26 11:18:16.000000000 -0800
+++ zplet.new/src/russotto/iff/IFFChunkNotFoundException.java	2007-11-15 11:38:32.000000000 -0800
@@ -1,8 +1,17 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
+
 package russotto.iff;
 
 public
 class IFFChunkNotFoundException extends Exception {
     /**
+	 * 
+	 */
+	private static final long serialVersionUID = -5761452412858846702L;
+
+	/**
      * Constructs an IFFChunkNotFoundException with no detail message.
      * A detail message is a String that describes this particular exception.
      */
diff -urbw zplet.20060707/src/russotto/iff/IFFFile.java zplet.new/src/russotto/iff/IFFFile.java
--- zplet.20060707/src/russotto/iff/IFFFile.java	2001-02-26 11:18:16.000000000 -0800
+++ zplet.new/src/russotto/iff/IFFFile.java	2007-11-15 11:38:28.000000000 -0800
@@ -1,3 +1,7 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
+
 package russotto.iff;
 import java.io.*;
 import java.util.*;
@@ -5,28 +9,28 @@
 public class IFFFile
 		extends RandomAccessFile
 {
-    protected Stack openchunks;
+    protected Stack<Long> openchunks;
     
     public IFFFile(String name, String mode) throws IOException
     {
 		super(name, mode);
-		openchunks = new Stack();
+		openchunks = new Stack<Long>();
     }
 
     public IFFFile(File file, String mode) throws IOException
     {
 		super(file, mode);
-		openchunks = new Stack();
+		openchunks = new Stack<Long>();
     }
 
     public void chunkSeek(int offset) throws IOException
     {
-    	seek(((Long)openchunks.peek()).longValue() + 4 + offset);
+    	seek((openchunks.peek()).longValue() + 4 + offset);
     }
     
     public int getChunkPointer() throws IOException
     {
-    	return (int)getFilePointer() - (int)((Long)openchunks.peek()).longValue() - 4;
+    	return (int)getFilePointer() - (int)(openchunks.peek()).longValue() - 4;
     }
 }
 
diff -urbw zplet.20060707/src/russotto/iff/IFFInputFile.java zplet.new/src/russotto/iff/IFFInputFile.java
--- zplet.20060707/src/russotto/iff/IFFInputFile.java	2001-02-26 11:18:16.000000000 -0800
+++ zplet.new/src/russotto/iff/IFFInputFile.java	2007-11-15 11:38:24.000000000 -0800
@@ -1,3 +1,7 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
+
 package russotto.iff;
 import java.io.*;
 import java.util.*;
@@ -5,18 +9,18 @@
 public class IFFInputFile
 		extends IFFFile
 {
-	private Stack openchunkends;
+	private Stack<Long> openchunkends;
 	
     public IFFInputFile(File file) throws IOException
     {
 		super(file, "r");
-		openchunkends = new Stack();
+		openchunkends = new Stack<Long>();
     }
     
     public IFFInputFile(String name) throws IOException
     {
 		super(name, "r");
-		openchunkends = new Stack();
+		openchunkends = new Stack<Long>();
     }
     
     public synchronized IFFChunkInfo readChunkInfo() throws IOException {
@@ -26,7 +30,7 @@
     	
     	read(chunktype, 0, 4);
     	chunkbegin = getFilePointer();
-    	result.chunktype = new String(chunktype, 0);
+    	result.chunktype = new String(chunktype, "US-ASCII");
     	result.chunklength = readInt();
 		openchunks.push(new Long(chunkbegin));
 		openchunkends.push(new Long(getFilePointer() + result.chunklength));
@@ -37,12 +41,12 @@
     public synchronized IFFChunkInfo skipToChunk(String type) throws IOException, IFFChunkNotFoundException {
     	IFFChunkInfo chunkinfo;
 
-		if (getFilePointer() >= ((Long)openchunkends.peek()).longValue())
+		if (getFilePointer() >= (openchunkends.peek()).longValue())
 			throw new IFFChunkNotFoundException("Chunk " + type + " not found at current level");
 		chunkinfo = readChunkInfo();
 		while (!chunkinfo.chunktype.equals(type)) {
 			closeChunk();
-			if (getFilePointer() >= ((Long)openchunkends.peek()).longValue())
+			if (getFilePointer() >= (openchunkends.peek()).longValue())
 				throw new IFFChunkNotFoundException("Chunk " + type + " not found at current level");
 			chunkinfo = readChunkInfo();
 		}
@@ -60,13 +64,13 @@
      	else {
 //     		throw new Exception("That's not a FORM!");
      	}
-     	return new String(subtype, 0);
+     	return new String(subtype, "US-ASCII");
      }
 
     public synchronized void closeChunk() throws IOException {
     	long chunkend;
     	
-    	chunkend = (((Long)openchunkends.pop()).longValue() + 1) & ~1L;
+    	chunkend = ((openchunkends.pop()).longValue() + 1) & ~1L;
     	openchunks.pop();
     	// doing the seek last ensures exceptions leave stacks consistent
     	seek(chunkend);
diff -urbw zplet.20060707/src/russotto/iff/IFFOutputFile.java zplet.new/src/russotto/iff/IFFOutputFile.java
--- zplet.20060707/src/russotto/iff/IFFOutputFile.java	2001-02-26 11:18:16.000000000 -0800
+++ zplet.new/src/russotto/iff/IFFOutputFile.java	2007-11-15 11:38:20.000000000 -0800
@@ -1,6 +1,9 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
+
 package russotto.iff;
 import java.io.*;
-import java.util.*;
 
 public class IFFOutputFile
 		extends IFFFile
@@ -31,8 +34,11 @@
 
     private byte[] getOSType(String s)
     {
+		byte[] bytes = s.getBytes();
+		if (bytes.length == 4)
+			return bytes;
 		byte result[] = new byte[4];
-		s.getBytes(0, 4, result, 0);
+		System.arraycopy(bytes, 0, result, 0, 4);
 		return result;
     }
 
Binary files zplet.20060707/src/russotto/zplet/.DS_Store and zplet.new/src/russotto/zplet/.DS_Store differ
Only in zplet.new/src/russotto/zplet: .svn
diff -urbw zplet.20060707/src/russotto/zplet/ZColor.java zplet.new/src/russotto/zplet/ZColor.java
--- zplet.20060707/src/russotto/zplet/ZColor.java	2001-02-26 11:18:16.000000000 -0800
+++ zplet.new/src/russotto/zplet/ZColor.java	2007-11-15 12:57:41.000000000 -0800
@@ -1,3 +1,6 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
 /* Zplet, a Z-Machine interpreter in Java */
 /* Copyright 1996,2001 Matthew T. Russotto */
 /* As of 23 February 2001, this code is open source and covered by the */
@@ -5,11 +8,7 @@
 
 package russotto.zplet;
 
-import java.util.*;
-import java.awt.*;
-import java.net.*;
-import java.io.*;
-import java.applet.Applet;
+import com.google.twisty.zplet.Color;
 
 public class ZColor {
 	public final static int Z_CURRENT = 0;
Only in zplet.20060707/src/russotto/zplet: ZJApp.java
Only in zplet.20060707/src/russotto/zplet: Zplet.java
Only in zplet.new/src/russotto/zplet/screenmodel: .svn
diff -urbw zplet.20060707/src/russotto/zplet/screenmodel/NoSuchKeyException.java zplet.new/src/russotto/zplet/screenmodel/NoSuchKeyException.java
--- zplet.20060707/src/russotto/zplet/screenmodel/NoSuchKeyException.java	2001-02-26 11:18:16.000000000 -0800
+++ zplet.new/src/russotto/zplet/screenmodel/NoSuchKeyException.java	2007-11-15 11:38:07.000000000 -0800
@@ -1,3 +1,6 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
 /* Zplet, a Z-Machine interpreter in Java */
 /* Copyright 1996,2001 Matthew T. Russotto */
 /* As of 23 February 2001, this code is open source and covered by the */
@@ -5,13 +8,12 @@
 
 package russotto.zplet.screenmodel;
 
-import java.util.*;
-import java.awt.*;
-import java.net.*;
-import java.io.*;
-import java.applet.Applet;
-
 class NoSuchKeyException extends Exception {
+	/**
+	 * 
+	 */
+	private static final long serialVersionUID = 159728078977125275L;
+
 	public NoSuchKeyException() {
 		super();
 	}
diff -urbw zplet.20060707/src/russotto/zplet/screenmodel/SyncVector.java zplet.new/src/russotto/zplet/screenmodel/SyncVector.java
--- zplet.20060707/src/russotto/zplet/screenmodel/SyncVector.java	2001-02-26 11:18:16.000000000 -0800
+++ zplet.new/src/russotto/zplet/screenmodel/SyncVector.java	2007-11-15 11:38:04.000000000 -0800
@@ -1,3 +1,6 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
 /* Zplet, a Z-Machine interpreter in Java */
 /* Copyright 1996,2001 Matthew T. Russotto */
 /* As of 23 February 2001, this code is open source and covered by the */
@@ -5,26 +8,25 @@
 
 package russotto.zplet.screenmodel;
 
-import java.util.*;
-import java.awt.*;
-import java.net.*;
-import java.io.*;
-import java.applet.Applet;
+import java.util.NoSuchElementException;
+import java.util.Vector;
+
+class SyncVector<T> extends Vector<T> {
+	private static final long serialVersionUID = 1615647740021244904L;
 
-class SyncVector extends Vector {
 	public SyncVector() {
 		super();
 	}
 
-	public synchronized Object syncPopFirstElement() {
-		Object first = syncFirstElement();
+	public synchronized T syncPopFirstElement() {
+		T first = syncFirstElement();
 		if (first != null)
 				removeElementAt(0);
 		return first;
 	}
 	
-	public synchronized Object syncFirstElement() {
-		Object first = null;
+	public synchronized T syncFirstElement() {
+		T first = null;
 		try {
 			first = super.firstElement();
 		} catch (NoSuchElementException booga) {}
@@ -35,7 +37,7 @@
 		return null;
 	}
 
-	public synchronized void syncAddElement(Object obj) {
+	public synchronized void syncAddElement(T obj) {
 		super.addElement(obj);
 		notify();
 	}
diff -urbw zplet.20060707/src/russotto/zplet/screenmodel/ZCursor.java zplet.new/src/russotto/zplet/screenmodel/ZCursor.java
--- zplet.20060707/src/russotto/zplet/screenmodel/ZCursor.java	2001-02-26 11:18:16.000000000 -0800
+++ zplet.new/src/russotto/zplet/screenmodel/ZCursor.java	2007-11-15 23:23:34.000000000 -0800
@@ -1,3 +1,6 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
 /* Zplet, a Z-Machine interpreter in Java */
 /* Copyright 1996,2001 Matthew T. Russotto */
 /* As of 23 February 2001, this code is open source and covered by the */
@@ -5,26 +8,24 @@
 
 package russotto.zplet.screenmodel;
 
-import java.util.*;
-import java.awt.*;
-import java.net.*;
-import java.io.*;
-import java.applet.Applet;
+import com.google.twisty.zplet.Color;
+import com.google.twisty.zplet.ZCanvas;
+import com.google.twisty.zplet.ZGraphics;
 
  class ZCursor {
 		Color cursorcolor, bgcolor;
 		boolean shown;
 		int t,l,w,h;
-		Component parent;
+		ZCanvas parent;
 		
-		ZCursor(Color cursorcolor, Color bgcolor, Component parent) {
+		ZCursor(Color cursorcolor, Color bgcolor, ZCanvas parent) {
 				shown = false;
 				this.cursorcolor = cursorcolor;
 				this.bgcolor = bgcolor;
 				this.parent = parent;
 		}
 
-		ZCursor(Component parent) {
+		ZCursor(ZCanvas parent) {
 				this(Color.green, Color.yellow, parent);
 		}
 
@@ -33,16 +34,11 @@
 		}
 
 		synchronized void show() {
-			Graphics g;
-			
 			if (!shown) {
 				shown = true;
 				if (parent != null) {
-					g = parent.getGraphics();
-					if (g != null) {
-						g.setColor(cursorcolor);
-						g.fillRect(l,t,w,h);
-					}
+					redraw(parent.getGraphics());
+					parent.repaint(l,t,w,h);
 				}
 			}
 		}
@@ -51,17 +47,19 @@
 			if (shown) {
 				shown = false;
 				if (parent != null) {
+					redraw(parent.getGraphics());
 					parent.repaint(l,t,w,h);
-//					g.setColor(bgcolor);
-//					g.fillRect(l,t,w,h);
 				}
 			}
 		}
 
-		synchronized void redraw(Graphics g) {
+		synchronized void redraw(ZGraphics g) {
+			if (g == null)
+				return;
 			if (shown) {
-				g.setColor(cursorcolor);
-				g.fillRect(l,t,w,h);
+				g.fillRect(l, t, w, h, cursorcolor);
+			} else {
+				g.fillRect(l, t, w, h, bgcolor);			
 			}
 		}
 
diff -urbw zplet.20060707/src/russotto/zplet/screenmodel/ZScreen.java zplet.new/src/russotto/zplet/screenmodel/ZScreen.java
--- zplet.20060707/src/russotto/zplet/screenmodel/ZScreen.java	2006-07-07 17:12:38.000000000 -0700
+++ zplet.new/src/russotto/zplet/screenmodel/ZScreen.java	2007-11-16 14:25:55.000000000 -0800
@@ -1,3 +1,6 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
 /* Zplet, a Z-Machine interpreter in Java */
 /* Copyright 1996,2001 Matthew T. Russotto */
 /* As of 23 February 2001, this code is open source and covered by the */
@@ -5,33 +8,38 @@
 
 package russotto.zplet.screenmodel;
 
-import java.util.*;
-import java.awt.*;
-import java.net.*;
-import java.io.*;
-import java.applet.Applet;
+import java.util.NoSuchElementException;
+import java.util.Vector;
+
 import russotto.zplet.ZColor;
 
-public class ZScreen extends Canvas {
+import com.google.twisty.TwistyView;
+import com.google.twisty.zplet.Dimension;
+import com.google.twisty.zplet.Event;
+import com.google.twisty.zplet.Font;
+import com.google.twisty.zplet.FontMetrics;
+import com.google.twisty.zplet.Image;
+import com.google.twisty.zplet.Toolkit;
+import com.google.twisty.zplet.ZCanvas;
+import com.google.twisty.zplet.ZGraphics;
+
+public class ZScreen extends ZCanvas {
 		int lines;
 		int chars; /* in fixed font */
 		Font fixedfont;
 		FontMetrics fixedmetrics;
 		Font variablefont;
 		Font graphicsfont;
-		SyncVector inputcodes;
-		Vector bufferedcodes;
+		SyncVector<Integer> inputcodes;
+		Vector<Integer> bufferedcodes;
 		boolean bufferdone;
 		ZWindow inputwindow;
 		ZCursor inputcursor;
 		int zforeground = ZColor.Z_BLACK;
 		int zbackground = ZColor.Z_WHITE;
 		Image backing_store;
-		Graphics g_store;
-		Color zbcolor;
+		ZGraphics g_store;
 		boolean hasscrolled = false;
-		public final static String DEFAULT_FONT_FAMILY = "Courier";
-		public final static int DEFAULT_FONT_SIZE = 12;
 		final static char accent_table[] = {
 			 	'\u00e4',			/* a-umlaut */
 			 	'\u00f6',			/* o-umlaut */
@@ -104,21 +112,17 @@
 			 	'\u00bf',			/* inverse-? */
 	     };
 
-
-		public ZScreen() {
-		    this (DEFAULT_FONT_FAMILY, DEFAULT_FONT_SIZE);
-		}
-
-		public ZScreen( String font_family, int font_size ) {
+		public ZScreen(TwistyView tv, String font_family, int font_size) {
+			super(tv);
 				Dimension mysize = size();
 				
 				this.setFixedFont (font_family, font_size);
 				fixedmetrics = getFontMetrics(fixedfont);
-				chars = mysize.width / fixedmetrics.charWidth(' ');
+			chars = mysize.width / fixedmetrics.charWidth('m');
 				lines = mysize.height / fixedmetrics.getHeight();
 
-				inputcodes = new SyncVector();
-				bufferedcodes = new Vector();
+			inputcodes = new SyncVector<Integer>();
+			bufferedcodes = new Vector<Integer>();
 				inputcursor = new ZCursor(this);
 				setForeground(ZColor.getcolor(zforeground));
 				setBackground(ZColor.getcolor(zbackground));
@@ -128,40 +132,6 @@
 				return ((key == 10) || (key == 13));
 		}
 
-/*		public boolean mouseDown(Event evt, int x, int y) {
-//				System.err.print("mouseDown ");
-				if (inside(x,y)) {
-						requestFocus();
-//						System.err.println("inside");
-						return true;
-				}
-				else {
-						System.err.println("outside");
-						return false;
-				}
-		}
-*/
-
-		public boolean mouseEnter(Event evt, int x, int y)
-		{
-				requestFocus();
-				return true; /* it's MY event */
-		}
-
-/*
-		public boolean gotFocus(Event evt, Object what)
-		{
-				System.err.println("ZScreen got focus");
-				return false;
-		}
-		
-		public boolean lostFocus(Event evt, Object what)
-		{
-				System.err.println("ZScreen lost focus");
-				return false;
-		}
-*/
-
 		static char zascii_to_unicode(short zascii) {
 				if ((zascii >= 32) && (zascii <= 126)) /* normal ascii */
 					return (char)zascii;
@@ -253,7 +223,7 @@
 				Integer thecode = null;
 				
 				while (thecode == null) {
-						thecode = (Integer)inputcodes.syncPopFirstElement();
+						thecode = inputcodes.syncPopFirstElement();
 				}
 				return (short)thecode.intValue();
 		}
@@ -261,16 +231,13 @@
 		public short read_buffered_code() { /* should really be synched */
 						   Integer thecode;
 				int incode;
-				short result;
 				int cw, ch;
 
 				inputwindow.flush();
-				cw = fixedmetrics.charWidth(' ');
+				cw = fixedmetrics.charWidth('m');
 				ch = fixedmetrics.getHeight();
 
-//				inputcursor.setGraphics(getGraphics());
-//				inputcursor.setcolors(getForeground(), getBackground());
-				inputcursor.setcolors(getForeground(), zbcolor);
+				inputcursor.setcolors(getForeground(), getBackground());
 				inputcursor.size(cw, ch);
 
 				while (!bufferdone) {
@@ -280,11 +247,10 @@
 						inputcursor.show();
 						Toolkit.getDefaultToolkit().sync();
 						incode = read_code();
-//						inputcursor.setGraphics(getGraphics());
 						inputcursor.hide();
 						if ((incode == 8) || (incode == 127)) {
 								try {
-										thecode = (Integer)bufferedcodes.lastElement();
+										thecode = bufferedcodes.lastElement();
 										bufferedcodes.removeElementAt(bufferedcodes.size() - 1);
 										inputwindow.flush();
 										inputwindow.movecursor(inputwindow.cursorx - 1, 
@@ -311,7 +277,7 @@
 								bufferedcodes.addElement(new Integer(incode));
 						}
 				}
-				thecode = (Integer)bufferedcodes.firstElement();
+				thecode = bufferedcodes.firstElement();
 				bufferedcodes.removeElementAt(0);
 				if (bufferedcodes.isEmpty()) {
 						bufferdone = false;
@@ -329,23 +295,20 @@
 
 		public synchronized void reshape(int x, int y, int width, int height) {
 				int lines;
-				int i;
-				char newbuffer[][];
 
 				if ((width >= 0) && (height >= 0)) {
 						lines = height / fixedmetrics.getHeight();
-						chars = width / fixedmetrics.charWidth(' ');
+						chars = width / fixedmetrics.charWidth('m');
 						backing_store = createImage(width, height);
 						g_store = backing_store.getGraphics();
-						g_store.setColor(zbcolor);
-						g_store.fillRect(0, 0, width, height);
+						g_store.fillRect(0, 0, width, height, getBackground());
 						this.lines = lines;
 				}
 				super.reshape(x, y, width, height);
 		}
 		
 		public int charwidth() { /* character width of the fixed font */
-				return fixedmetrics.charWidth(' ');
+				return fixedmetrics.charWidth('m');
 		}
 
 		/**
@@ -361,10 +324,6 @@
 		public synchronized void
 		setFixedFont( String font_family, int font_size )
 		{
-		    if (font_size <= 0)
-		    {
-			font_size = this.DEFAULT_FONT_SIZE;
-		    }
 		    this.fixedfont = new Font(font_family, Font.PLAIN, font_size);
 		}
 
@@ -387,9 +346,7 @@
 		public synchronized void settext(int y, int x, char newtext[],
 																		 int offset, int length, boolean reverse,
 																		 Font textfont) {
-				int i;
-				char newbuffer[];
-				Graphics g;
+				ZGraphics g;
 
 				try {
 						g_store.setFont(textfont);
@@ -405,33 +362,26 @@
 				}
 		}
 
-		protected synchronized void drawtext(Graphics g, int y, int x, char newtext[], int offset, int length, boolean reverse) {
+		protected synchronized void drawtext(ZGraphics g, int y, int x, char newtext[], int offset, int length, boolean reverse) {
 				int tw, th;
 				int tx, ty;
 				
-				tw = length * fixedmetrics.charWidth(' ');
+				tw = fixedmetrics.stringWidth(newtext, offset, length);
 				th = fixedmetrics.getHeight();
-				tx = x * fixedmetrics.charWidth(' ');
+				tx = x * fixedmetrics.charWidth('m');
 				ty = th * (y + 1) - fixedmetrics.getDescent();
 				if (reverse) {
-						g.setColor(getForeground());
-						g.fillRect(tx, th * y, tw, th);
-//						g.setColor(getBackground());
-						g.setColor(zbcolor);
+						g.fillRect(tx, th * y, tw, th, getForeground());
+						g.drawChars(newtext, offset, length, tx, ty, getBackground());
 				}
 				else {
-//						g.setColor(getBackground());
-						g.setColor(zbcolor);
-						g.fillRect(tx, th * y, tw, th);
-						g.setColor(getForeground());
+						g.fillRect(tx, th * y, tw, th, getBackground());
+						g.drawChars(newtext, offset, length, tx, ty, getForeground());
 				}
-				g.drawChars(newtext, offset, length, tx, ty);
-				g.setColor(getForeground());
+				repaint(tx, th * y, tw, th);
 		}
 		
 		public synchronized void scrollLines(int top, int height, int lines) {
-				int j;
-				Graphics g;
 				int texttop;
 
 //				System.err.println("scrollLines top height lines "
@@ -443,10 +393,9 @@
 						g_store.copyArea(0, texttop + lines * fixedmetrics.getHeight(),
 														 size().width, (height - lines) * fixedmetrics.getHeight(),
 														 0, -lines * fixedmetrics.getHeight());
-//						g_store.setColor(getBackground());
-						g_store.setColor(zbcolor);
 						g_store.fillRect(0, texttop + ((height-1) * fixedmetrics.getHeight()),
-														 size().width, fixedmetrics.getHeight());
+														 size().width, fixedmetrics.getHeight(),
+														 getBackground());
 //						Toolkit.getDefaultToolkit().sync();
 				}
 				catch (NullPointerException booga) {
@@ -456,36 +405,11 @@
 				hasscrolled = true;
 		}
 		
-		public synchronized void paint(Graphics g) {
-				int y;
-				int ypixels;
-
-//				super.paint(g);
-//				System.err.println("paint");
-				g.drawImage(backing_store, 0, 0, null);
-				inputcursor.redraw(g);
-				hasscrolled = false;
-		}
-
-//		public void repaint(long tm, int x, int y, int width, int height) {
-//				System.err.println("repaint: " + tm + " " + x + " " + y + " " + width + " " + height);
-//				super.repaint(tm,x,y,width,height);
-//		}
-
-		public void update(Graphics g) {
-//				System.err.println("update");
-				g.setColor(getForeground());
-				paint(g);
-		}
-
 		public void clear() {
 				Dimension mysize = size();
 
 				try {
-//						g_store.setColor(getBackground());
-						g_store.setColor(zbcolor);
-						g_store.fillRect(0, 0,
-														 mysize.width, mysize.height);
+						g_store.fillRect(0, 0, mysize.width, mysize.height, getBackground());
 				}
 				catch (NullPointerException booga) {
 						System.err.println("No graphics in clear");
@@ -512,25 +436,10 @@
 		public void setZBackground(int zcolor)
 		{
 				zbackground = zcolor;
-//				setBackground(ZColor.getcolor(zcolor)); Yucky side effects
-				zbcolor = ZColor.getcolor(zcolor);
-		}
-		
-		public Frame getFrame() {
-			Component cursor;
-			
-			cursor = this;
-			while (!(cursor instanceof Frame))
-				cursor = cursor.getParent();
-				
-			return (Frame)cursor;
-		}
-		
-		public Dimension minimumSize() {
-				return new Dimension(100,100);
+				setBackground(ZColor.getcolor(zcolor));
 		}
 
-		public Dimension preferredSize() {
-				return new Dimension(500,500);
+		public int stringWidth(char[] chars, int index, int count, Font font) {
+			return getFontMetrics(font).stringWidth(chars, index, count);
 		}
 }
diff -urbw zplet.20060707/src/russotto/zplet/screenmodel/ZStatus.java zplet.new/src/russotto/zplet/screenmodel/ZStatus.java
--- zplet.20060707/src/russotto/zplet/screenmodel/ZStatus.java	2001-02-26 11:18:16.000000000 -0800
+++ zplet.new/src/russotto/zplet/screenmodel/ZStatus.java	2007-11-15 12:57:41.000000000 -0800
@@ -1,3 +1,6 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
 /* Zplet, a Z-Machine interpreter in Java */
 /* Copyright 1996,2001 Matthew T. Russotto */
 /* As of 23 February 2001, this code is open source and covered by the */
@@ -5,13 +8,9 @@
 
 package russotto.zplet.screenmodel;
 
-import java.util.*;
-import java.awt.*;
-import java.net.*;
-import java.io.*;
-import java.applet.Applet;
+import com.google.twisty.zplet.Label;
 
-public class ZStatus extends Panel {
+public class ZStatus {
 		 boolean timegame;
 		 boolean initialized;
 		 boolean chronograph;
@@ -23,12 +22,9 @@
 		 Label Right;
 		 Label Left;
 		
-		 public ZStatus() {
-				 setLayout(new BorderLayout());
-				 Right = new Label();
-				 add("East", Right);
-				 Left = new Label();
-				 add("West", Left);
+		 public ZStatus(Label left, Label right) {
+				 Right = right;
+				 Left = left;
 				 chronograph = false;
 		 }
 
@@ -81,7 +77,7 @@
 				 layout();
 				 repaint();
 		 }
-		
+	/*	
 		 public Dimension minimumSize() {
 				 return new Dimension(100,10);
 		 }
@@ -89,6 +85,13 @@
 		 public Dimension preferredSize() {
 				 return new Dimension(500,20);
 		 }
+		 */
+		 
+		 private void layout() {
+		 }
+		 
+		 private void repaint() {
+		 }
  }
 
 
diff -urbw zplet.20060707/src/russotto/zplet/screenmodel/ZWindow.java zplet.new/src/russotto/zplet/screenmodel/ZWindow.java
--- zplet.20060707/src/russotto/zplet/screenmodel/ZWindow.java	2001-02-26 11:18:16.000000000 -0800
+++ zplet.new/src/russotto/zplet/screenmodel/ZWindow.java	2007-11-16 15:45:25.000000000 -0800
@@ -1,3 +1,6 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
 /* Zplet, a Z-Machine interpreter in Java */
 /* Copyright 1996,2001 Matthew T. Russotto */
 /* As of 23 February 2001, this code is open source and covered by the */
@@ -5,13 +8,10 @@
 
 package russotto.zplet.screenmodel;
 
-import java.util.*;
-import java.awt.*;
-import java.net.*;
-import java.io.*;
-import java.applet.Applet;
 import russotto.zplet.ZColor;
 
+import com.google.twisty.zplet.Font;
+
 public class ZWindow {
 		 final static int ROMAN = 0;
 		 final static int REVERSE = 1;
@@ -255,13 +255,17 @@
 //				 System.err.println();
 		 }
 
+		 public void bufferString(String s) {
+			 bufferchars(s.toCharArray());
+		 }
+		 
 		 public synchronized void bufferchars(char chars[]) {
 				 int last;
 				 int space;
 				 String printstring;
 
 //				 linebuffer = linebuffer + chars;
-				 linebuffer = new StringBuffer(linebuffer).append(chars).toString();
+				 linebuffer = new StringBuilder(linebuffer).append(chars).toString();
 
 				 if (wrap) {
 						 last = linebuffer.length();
@@ -409,7 +413,7 @@
 		 }
 
 		 public int charsWidth(char line[], int offset, int length) {
-				 return myscreen.charwidth() * length;
+				 return myscreen.stringWidth(line, offset, length, curfont);
 		 }
  }
 
Only in zplet.new/src/russotto/zplet/zmachine: .svn
diff -urbw zplet.20060707/src/russotto/zplet/zmachine/ZDictionary.java zplet.new/src/russotto/zplet/zmachine/ZDictionary.java
--- zplet.20060707/src/russotto/zplet/zmachine/ZDictionary.java	2001-02-26 11:18:16.000000000 -0800
+++ zplet.new/src/russotto/zplet/zmachine/ZDictionary.java	2007-11-15 11:37:42.000000000 -0800
@@ -1,3 +1,6 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
 /* Zplet, a Z-Machine interpreter in Java */
 /* Copyright 1996,2001 Matthew T. Russotto */
 /* As of 23 February 2001, this code is open source and covered by the */
@@ -5,11 +8,6 @@
 
 package russotto.zplet.zmachine;
 
-import java.util.*;
-import java.awt.*;
-import java.net.*;
-import java.io.*;
-import java.applet.Applet;
 
 public abstract class ZDictionary
 {
diff -urbw zplet.20060707/src/russotto/zplet/zmachine/ZFrameBound.java zplet.new/src/russotto/zplet/zmachine/ZFrameBound.java
--- zplet.20060707/src/russotto/zplet/zmachine/ZFrameBound.java	2001-02-26 11:18:16.000000000 -0800
+++ zplet.new/src/russotto/zplet/zmachine/ZFrameBound.java	2007-11-15 11:37:39.000000000 -0800
@@ -1,3 +1,6 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
 /* Zplet, a Z-Machine interpreter in Java */
 /* Copyright 1996,2001 Matthew T. Russotto */
 /* As of 23 February 2001, this code is open source and covered by the */
diff -urbw zplet.20060707/src/russotto/zplet/zmachine/ZHeader.java zplet.new/src/russotto/zplet/zmachine/ZHeader.java
--- zplet.20060707/src/russotto/zplet/zmachine/ZHeader.java	2001-02-26 11:18:16.000000000 -0800
+++ zplet.new/src/russotto/zplet/zmachine/ZHeader.java	2007-11-15 11:37:35.000000000 -0800
@@ -1,3 +1,6 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
 /* Zplet, a Z-Machine interpreter in Java */
 /* Copyright 1996,2001 Matthew T. Russotto */
 /* As of 23 February 2001, this code is open source and covered by the */
@@ -5,12 +8,6 @@
 
 package russotto.zplet.zmachine;
 
-import java.util.*;
-import java.awt.*;
-import java.net.*;
-import java.io.*;
-import java.applet.Applet;
-import russotto.iff.*;
 
 public abstract class ZHeader {
 	protected byte memory_image[];
diff -urbw zplet.20060707/src/russotto/zplet/zmachine/ZInstruction.java zplet.new/src/russotto/zplet/zmachine/ZInstruction.java
--- zplet.20060707/src/russotto/zplet/zmachine/ZInstruction.java	2001-02-26 11:18:16.000000000 -0800
+++ zplet.new/src/russotto/zplet/zmachine/ZInstruction.java	2007-11-16 00:35:15.000000000 -0800
@@ -1,3 +1,6 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
 /* Zplet, a Z-Machine interpreter in Java */
 /* Copyright 1996,2001 Matthew T. Russotto */
 /* As of 23 February 2001, this code is open source and covered by the */
@@ -5,11 +8,6 @@
 
 package russotto.zplet.zmachine;
 
-import java.util.*;
-import java.awt.*;
-import java.net.*;
-import java.io.*;
-import java.applet.Applet;
 import russotto.zplet.zmachine.state.ZState;
 
 public class ZInstruction {
@@ -197,19 +195,19 @@
 
 					while (optypebytes-- != 0) {
 								optype = (optypes & 0xC0)>>6;
-								if (optype == zm.OP_OMITTED)
+								if (optype == ZMachine.OP_OMITTED)
 									break;
 								operands[count++] = zm.get_operand(optype);
 								optype = (optypes & 0x30)>>4;
-								if (optype == zm.OP_OMITTED)
+								if (optype == ZMachine.OP_OMITTED)
 									break;
 								operands[count++] = zm.get_operand(optype);
 								optype = (optypes & 0x0C)>>2;
-								if (optype == zm.OP_OMITTED)
+								if (optype == ZMachine.OP_OMITTED)
 									break;
 								operands[count++] = zm.get_operand(optype);
 								optype = (optypes & 0x03);
-								if (optype == zm.OP_OMITTED)
+								if (optype == ZMachine.OP_OMITTED)
 									break;
 								operands[count++] = zm.get_operand(optype);
 								optypes = optypes2;
@@ -218,7 +216,7 @@
 
 				case 0x80: /* short form */
 					optype = (opcode&0x30) >> 4;
-					if (optype == zm.OP_OMITTED) { /* 0OP */
+					if (optype == ZMachine.OP_OMITTED) { /* 0OP */
 								opnum = opcode;
 								count = 0;
 					}
@@ -882,7 +880,7 @@
 
 	protected short op_save()
 	{
-				if ((new ZState(zm)).disk_save(zm.screen.getFrame(), save_pc))
+				if ((new ZState(zm)).disk_save(zm.screen, save_pc))
 					return ZSAVE_SUCCESS;
 				return ZFALSE;
 	}
@@ -892,7 +890,7 @@
 				ZState restore_state;
 				
 				restore_state = new ZState(zm);
-				if (restore_state.restore_from_disk(zm.screen.getFrame())) {
+				if (restore_state.restore_from_disk(zm.screen)) {
 					zm.restore(restore_state);
 					decode_second_half();
 					
@@ -955,7 +953,7 @@
 				zm.print_ascii_char((short)'*');
 				zm.print_ascii_char((short)'*');
 				zm.print_ascii_char((short)13);
-				zm.stop();
+				zm.interrupt();
 				return ZFALSE;
 	}
 
diff -urbw zplet.20060707/src/russotto/zplet/zmachine/ZMachine.java zplet.new/src/russotto/zplet/zmachine/ZMachine.java
--- zplet.20060707/src/russotto/zplet/zmachine/ZMachine.java	2001-02-26 11:18:16.000000000 -0800
+++ zplet.new/src/russotto/zplet/zmachine/ZMachine.java	2007-11-15 11:37:27.000000000 -0800
@@ -1,3 +1,6 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
 /* Zplet, a Z-Machine interpreter in Java */
 /* Copyright 1996,2001 Matthew T. Russotto */
 /* As of 23 February 2001, this code is open source and covered by the */
@@ -5,12 +8,13 @@
 
 package russotto.zplet.zmachine;
 
-import java.util.*;
-import java.awt.*;
-import java.net.*;
-import java.io.*;
-import java.applet.Applet;
-import russotto.zplet.screenmodel.*;
+import java.util.EmptyStackException;
+import java.util.Random;
+import java.util.Stack;
+
+import russotto.zplet.screenmodel.ZScreen;
+import russotto.zplet.screenmodel.ZStatus;
+import russotto.zplet.screenmodel.ZWindow;
 import russotto.zplet.zmachine.state.ZState;
 
 public abstract class ZMachine extends Thread {
@@ -24,7 +28,7 @@
 	public ZState restart_state;
 	protected ZStatus status_line;
 	public byte memory_image[];
-	public Stack zstack;
+	public Stack<Object> zstack;
 	public Random zrandom;
 	protected int globals;
 	public short locals[];
@@ -41,6 +45,7 @@
 	protected String status_location;
 
 	protected final String A2 = "0123456789.,!?_#\'\"/\\-:()";
+	private boolean aborting;
 
 	public final static int OP_LARGE = 0;
 	public final static int OP_SMALL = 1;
@@ -52,7 +57,7 @@
 				this.status_line = status_line;
 				this.memory_image = memory_image;
 				locals = new short[0];
-				zstack = new Stack();
+				zstack = new Stack<Object>();
 				restart_state = new ZState(this);
 				restart_state.save_current();
 				zrandom = new Random(); /* starts in "random" mode */
@@ -310,6 +315,7 @@
 	}
 
 	public void start() {
+		aborting = false;
 				screen.clear();
 				restart();
 				header.set_transcripting(false);
@@ -319,7 +325,7 @@
 	public void run()
 	{
 				try {
-					while (true) {
+					while (!aborting && !isInterrupted()) {
 //								System.err.print("pc = ");
 //								System.err.println(Integer.toString(pc, 16));
 								zi.decode_instruction();
@@ -340,6 +346,12 @@
 				}
 	}
 
+	public void abort() {
+		aborting = true;
+		interrupt();
+		pc = -1;
+	}
+
 	void calculate_checksum() {
 				int filesize = header.file_length();
 				int i;
@@ -421,7 +433,6 @@
 	}
 	
 	public short get_operand(int optype) {
-				short operand;
 				switch (optype) {
 				case OP_SMALL:
 					return (short)(get_code_byte() & 0xFF);
diff -urbw zplet.20060707/src/russotto/zplet/zmachine/ZObjectTree.java zplet.new/src/russotto/zplet/zmachine/ZObjectTree.java
--- zplet.20060707/src/russotto/zplet/zmachine/ZObjectTree.java	2001-02-26 11:18:16.000000000 -0800
+++ zplet.new/src/russotto/zplet/zmachine/ZObjectTree.java	2007-11-15 11:37:23.000000000 -0800
@@ -1,3 +1,6 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
 /* Zplet, a Z-Machine interpreter in Java */
 /* Copyright 1996,2001 Matthew T. Russotto */
 /* As of 23 February 2001, this code is open source and covered by the */
@@ -5,11 +8,6 @@
 
 package russotto.zplet.zmachine;
 
-import java.util.*;
-import java.awt.*;
-import java.net.*;
-import java.io.*;
-import java.applet.Applet;
 
 public abstract class ZObjectTree {
 	protected ZMachine zm;
Only in zplet.new/src/russotto/zplet/zmachine/state: .svn
diff -urbw zplet.20060707/src/russotto/zplet/zmachine/state/ZSFrame.java zplet.new/src/russotto/zplet/zmachine/state/ZSFrame.java
--- zplet.20060707/src/russotto/zplet/zmachine/state/ZSFrame.java	2001-02-26 11:18:16.000000000 -0800
+++ zplet.new/src/russotto/zplet/zmachine/state/ZSFrame.java	2007-11-16 00:51:37.000000000 -0800
@@ -5,64 +5,40 @@
 
 package russotto.zplet.zmachine.state;
 
-import java.util.*;
-import java.awt.*;
-import java.net.*;
-import java.io.*;
-import java.applet.Applet;
-import russotto.iff.*;
-
-class ZSFrame extends Frame {
-	FileDialog fd;
+class ZSFrame {
+  // FileDialog fd;
 	boolean ran=false;
-	int boxtype = FileDialog.SAVE;
+
+  // int boxtype = FileDialog.SAVE;
 	Thread blockedthread = null;
 
-	public ZSFrame()
-	{
-		super();
+  public ZSFrame() {
+    // super();
 	}
 
-	public ZSFrame(String title)
-	{
-		super(title);
+  public ZSFrame(String title) {
+    // super(title);
 	}
 
-	public ZSFrame(String title, int boxtype)
-	{
+  public ZSFrame(String title, int boxtype) {
 		this(title);
-		this.boxtype = boxtype;
-	}
-
-	public boolean handleEvent(Event evt)
-	{
-		if (!ran) {
-			fd = new FileDialog(this, "Save game as...", boxtype);
-			fd.show();
-		}
-		ran = true;
-		if (blockedthread != null)
-			blockedthread.resume();
-		return super.handleEvent(evt);
+    // this.boxtype = boxtype;
 	}
 
-	public String getFile() {
-		if (!ran) {
-			blockedthread = Thread.currentThread();
-			blockedthread.suspend();
-			/* race conditions galore */
-		}
-		return fd.getFile();
-	}
-
-	public String getDirectory() {
-		if (!ran) {
-			blockedthread = Thread.currentThread();
-			blockedthread.suspend();
-			/* race conditions galore */
-		}
-		return fd.getDirectory();
-	}
+  /*
+         * MM TODO public boolean handleEvent(Event evt) { if (!ran) { fd = new
+         * FileDialog(this, "Save game as...", boxtype); fd.show(); } ran =
+         * true; if (blockedthread != null) blockedthread.resume(); return
+         * super.handleEvent(evt); }
+         * 
+         * public String getFile() { if (!ran) { blockedthread =
+         * Thread.currentThread(); blockedthread.suspend(); // race conditions
+         * galore } return fd.getFile(); }
+         * 
+         * public String getDirectory() { if (!ran) { blockedthread =
+         * Thread.currentThread(); blockedthread.suspend(); // race conditions
+         * galore } return fd.getDirectory(); }
+         */
 }
 
 /** ZState holds the state-of-play for the Z machine */
diff -urbw zplet.20060707/src/russotto/zplet/zmachine/state/ZState.java zplet.new/src/russotto/zplet/zmachine/state/ZState.java
--- zplet.20060707/src/russotto/zplet/zmachine/state/ZState.java	2001-02-26 11:18:16.000000000 -0800
+++ zplet.new/src/russotto/zplet/zmachine/state/ZState.java	2007-11-16 00:37:06.000000000 -0800
@@ -1,3 +1,6 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
 /* Zplet, a Z-Machine interpreter in Java */
 /* Copyright 1996,2001 Matthew T. Russotto */
 /* As of 23 February 2001, this code is open source and covered by the */
@@ -5,24 +8,27 @@
 
 package russotto.zplet.zmachine.state;
 
-import java.util.*;
-import java.awt.*;
-import java.net.*;
-import java.io.*;
-import java.applet.Applet;
-import russotto.iff.*;
-import russotto.zplet.zmachine.ZMachine;
-import russotto.zplet.zmachine.ZHeader;
+import java.io.IOException;
+import java.util.Enumeration;
+import java.util.Stack;
+
+import russotto.iff.IFFChunkInfo;
+import russotto.iff.IFFChunkNotFoundException;
+import russotto.iff.IFFInputFile;
+import russotto.iff.IFFOutputFile;
+import russotto.zplet.screenmodel.ZScreen;
 import russotto.zplet.zmachine.ZFrameBound;
+import russotto.zplet.zmachine.ZHeader;
 import russotto.zplet.zmachine.ZInstruction;
-import russotto.zplet.zmachine.zmachine5.ZMachine5;
+import russotto.zplet.zmachine.ZMachine;
 import russotto.zplet.zmachine.zmachine5.ZInstruction5;
+import russotto.zplet.zmachine.zmachine5.ZMachine5;
 
 public class ZState {
 	final static short QUETZAL_PROCEDURE = 0x10;
 
 	ZMachine zm;
-	Stack zstack;
+	Stack<Object> zstack;
 	public ZHeader header;
 	int pc;
 	byte dynamic[];
@@ -33,6 +39,12 @@
 		this.zm = zm;
 	}
 
+	private static Stack<Object> clonestack(Stack<Object> s) {
+		Stack<Object> r = new Stack<Object>();
+		r.addAll(s);
+		return r;
+	}
+
 	public void save_current() {
 		int dyn_size;
 
@@ -40,7 +52,7 @@
 		dyn_size = header.static_base();
 /* clones the stack but not the Integers within.  Fortunately they are
 immutable.	But the arrays aren't, so don't mess with them */
-		zstack = (Stack)zm.zstack.clone();
+		zstack = clonestack(zm.zstack);
 		dynamic = new byte[dyn_size];
 		System.arraycopy(zm.memory_image, 0, dynamic, 0, dyn_size);
 		locals = new short[zm.locals.length];
@@ -55,47 +67,25 @@
 		System.arraycopy(dynamic, 0, zm.memory_image, 0, dynamic.length);
 		zm.locals = new short[locals.length];
 		System.arraycopy(locals, 0, zm.locals, 0, locals.length);
-		zm.zstack = (Stack)zstack.clone();
+		zm.zstack = clonestack(zstack);
 		zm.pc = pc;
 		if (header.version() > 3)
 			((ZMachine5)zm).argcount = argcount;
 	}
 
-	String get_save_file_name(Frame parentframe)
+	String get_save_file_name(ZScreen parent)
 	{
-		FileDialog fd;
-		String returnval;
-
-		try {
-			fd = new FileDialog(parentframe, "Save game as...", FileDialog.SAVE);
-			fd.show();
-			Toolkit.getDefaultToolkit().sync();
-			returnval = fd.getDirectory() + fd.getFile();
-		}
-		catch (AWTError awte) {
-			returnval = "";
-		}
-		return returnval;
+		// TODO: androidify this
+		return "/tmp/twisty.sav";
 	}
 	
-	public String get_restore_file_name(Frame parentframe)
+	public String get_restore_file_name(ZScreen parent)
 	{
-		FileDialog fd;
-		String returnval;
-
-		try {
-			fd = new FileDialog(parentframe, "Restore game from...", FileDialog.LOAD);
-			fd.show();
-			Toolkit.getDefaultToolkit().sync();
-			returnval = fd.getDirectory() + fd.getFile();
-		}
-		catch (AWTError awte) {
-			returnval = "";
-		}
-		return returnval;
+		// TODO: androidify this
+		return "/tmp/twisty.sav";
 	}
 
-	public boolean restore_from_disk(Frame parentframe) {
+	public boolean restore_from_disk(ZScreen parent) {
 		String fname;
 		IFFInputFile infile = null;
 		IFFChunkInfo chunkinfo;
@@ -123,7 +113,7 @@
 		lastargmask = 0;
 		
 		version = zm.header.version();
-		fname = get_restore_file_name(parentframe);
+		fname = get_restore_file_name(parent);
 		try {
 			infile = new IFFInputFile(fname);
 			formtype = infile.readFORM();
@@ -198,7 +188,7 @@
 				infile.seek(ifhdend);
 				/* read the stacks */
 				chunkinfo = infile.skipToChunk("Stks");
-				zstack = new Stack();
+				zstack = new Stack<Object>();
 				
 				frameno = 0;
 				while (infile.getChunkPointer() < chunkinfo.chunklength) {
@@ -340,9 +330,9 @@
 		outfile.closeChunk();
 	}
 	
-	public boolean disk_save(Frame parentframe, int save_pc) {
+	public boolean disk_save(ZScreen parent, int save_pc) {
 		String fname;
-		Enumeration e,f;
+		Enumeration<Object> e,f;
 		Object el, el2;
 		int i;
 		IFFOutputFile outfile = null;
@@ -359,15 +349,15 @@
 		boolean returnvalue = false;
 
 		try {
-			fname = get_save_file_name(parentframe);
+			fname = get_save_file_name(parent);
 			if (fname.equals("") || fname.equals("nullnull"))
 				throw new java.io.IOException("No file picked"); /* user didn't pick a file */
 				
 			outfile = new IFFOutputFile(fname, "IFZS");
 			outfile.openChunk("IFhd");
-			outfile.write(zm.memory_image, header.RELEASE, 2);
-			outfile.write(zm.memory_image, header.SERIAL_NUMBER, 6);
-			outfile.write(zm.memory_image, header.FILE_CHECKSUM, 2);
+			outfile.write(zm.memory_image, ZHeader.RELEASE, 2);
+			outfile.write(zm.memory_image, ZHeader.SERIAL_NUMBER, 6);
+			outfile.write(zm.memory_image, ZHeader.FILE_CHECKSUM, 2);
 			outfile.writeByte((save_pc&0xFF0000) >>> 16);
 			outfile.writeShort(save_pc&0xFFFF);
 			outfile.closeChunk();
diff -urbw zplet.20060707/src/russotto/zplet/zmachine/state/ZStateHeader.java zplet.new/src/russotto/zplet/zmachine/state/ZStateHeader.java
--- zplet.20060707/src/russotto/zplet/zmachine/state/ZStateHeader.java	2001-02-26 11:18:16.000000000 -0800
+++ zplet.new/src/russotto/zplet/zmachine/state/ZStateHeader.java	2007-11-15 11:37:16.000000000 -0800
@@ -1,3 +1,6 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
 /* Zplet, a Z-Machine interpreter in Java */
 /* Copyright 1996,2001 Matthew T. Russotto */
 /* As of 23 February 2001, this code is open source and covered by the */
@@ -5,12 +8,6 @@
 
 package russotto.zplet.zmachine.state;
 
-import java.util.*;
-import java.awt.*;
-import java.net.*;
-import java.io.*;
-import java.applet.Applet;
-import russotto.iff.*;
 import russotto.zplet.zmachine.ZHeader;
 
 class ZStateHeader extends ZHeader
Only in zplet.new/src/russotto/zplet/zmachine/zmachine3: .svn
diff -urbw zplet.20060707/src/russotto/zplet/zmachine/zmachine3/ZDictionary3.java zplet.new/src/russotto/zplet/zmachine/zmachine3/ZDictionary3.java
--- zplet.20060707/src/russotto/zplet/zmachine/zmachine3/ZDictionary3.java	2001-02-26 11:18:16.000000000 -0800
+++ zplet.new/src/russotto/zplet/zmachine/zmachine3/ZDictionary3.java	2007-11-15 11:37:14.000000000 -0800
@@ -1,3 +1,6 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
 /* Zplet, a Z-Machine interpreter in Java */
 /* Copyright 1996,2001 Matthew T. Russotto */
 /* As of 23 February 2001, this code is open source and covered by the */
@@ -5,11 +8,6 @@
 
 package russotto.zplet.zmachine.zmachine3;
 
-import java.util.*;
-import java.awt.*;
-import java.net.*;
-import java.io.*;
-import java.applet.Applet;
 import russotto.zplet.zmachine.ZDictionary;
 import russotto.zplet.zmachine.ZMachine;
 
@@ -107,7 +105,6 @@
 	public void tokenise(int textloc, int textlength, int parseloc) {
 		int wordloc, wordlength;
 		int textleft = textlength;
-		int dictloc;
 		char ch;
 		boolean pbfull;
 
diff -urbw zplet.20060707/src/russotto/zplet/zmachine/zmachine3/ZHeader3.java zplet.new/src/russotto/zplet/zmachine/zmachine3/ZHeader3.java
--- zplet.20060707/src/russotto/zplet/zmachine/zmachine3/ZHeader3.java	2001-02-26 11:18:16.000000000 -0800
+++ zplet.new/src/russotto/zplet/zmachine/zmachine3/ZHeader3.java	2007-11-15 11:37:11.000000000 -0800
@@ -1,3 +1,6 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
 /* Zplet, a Z-Machine interpreter in Java */
 /* Copyright 1996,2001 Matthew T. Russotto */
 /* As of 23 February 2001, this code is open source and covered by the */
@@ -5,11 +8,6 @@
 
 package russotto.zplet.zmachine.zmachine3;
 
-import java.util.*;
-import java.awt.*;
-import java.net.*;
-import java.io.*;
-import java.applet.Applet;
 import russotto.zplet.zmachine.ZHeader;
 
 class ZHeader3 extends ZHeader
diff -urbw zplet.20060707/src/russotto/zplet/zmachine/zmachine3/ZMachine3.java zplet.new/src/russotto/zplet/zmachine/zmachine3/ZMachine3.java
--- zplet.20060707/src/russotto/zplet/zmachine/zmachine3/ZMachine3.java	2001-02-26 11:18:16.000000000 -0800
+++ zplet.new/src/russotto/zplet/zmachine/zmachine3/ZMachine3.java	2007-11-15 11:37:07.000000000 -0800
@@ -1,3 +1,6 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
 /* Zplet, a Z-Machine interpreter in Java */
 /* Copyright 1996,2001 Matthew T. Russotto */
 /* As of 23 February 2001, this code is open source and covered by the */
@@ -5,15 +8,11 @@
 
 package russotto.zplet.zmachine.zmachine3;
 
-import java.util.*;
-import java.awt.*;
-import java.net.*;
-import java.io.*;
-import java.applet.Applet;
-import russotto.zplet.zmachine.*;
 import russotto.zplet.screenmodel.ZScreen;
 import russotto.zplet.screenmodel.ZStatus;
 import russotto.zplet.screenmodel.ZWindow;
+import russotto.zplet.zmachine.ZInstruction;
+import russotto.zplet.zmachine.ZMachine;
 
 public class ZMachine3 extends ZMachine {
 
diff -urbw zplet.20060707/src/russotto/zplet/zmachine/zmachine3/ZObjectTree3.java zplet.new/src/russotto/zplet/zmachine/zmachine3/ZObjectTree3.java
--- zplet.20060707/src/russotto/zplet/zmachine/zmachine3/ZObjectTree3.java	2001-02-26 11:18:16.000000000 -0800
+++ zplet.new/src/russotto/zplet/zmachine/zmachine3/ZObjectTree3.java	2007-11-15 11:37:03.000000000 -0800
@@ -1,3 +1,6 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
 /* Zplet, a Z-Machine interpreter in Java */
 /* Copyright 1996,2001 Matthew T. Russotto */
 /* As of 23 February 2001, this code is open source and covered by the */
@@ -5,13 +8,8 @@
 
 package russotto.zplet.zmachine.zmachine3;
 
-import java.util.*;
-import java.awt.*;
-import java.net.*;
-import java.io.*;
-import java.applet.Applet;
-import russotto.zplet.zmachine.ZObjectTree;
 import russotto.zplet.zmachine.ZMachine;
+import russotto.zplet.zmachine.ZObjectTree;
 
 class ZObjectTree3 extends ZObjectTree
 {
Only in zplet.new/src/russotto/zplet/zmachine/zmachine5: .svn
diff -urbw zplet.20060707/src/russotto/zplet/zmachine/zmachine5/ZDictionary5.java zplet.new/src/russotto/zplet/zmachine/zmachine5/ZDictionary5.java
--- zplet.20060707/src/russotto/zplet/zmachine/zmachine5/ZDictionary5.java	2001-02-26 11:18:18.000000000 -0800
+++ zplet.new/src/russotto/zplet/zmachine/zmachine5/ZDictionary5.java	2007-11-15 11:37:00.000000000 -0800
@@ -1,3 +1,6 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
 /* Zplet, a Z-Machine interpreter in Java */
 /* Copyright 1996,2001 Matthew T. Russotto */
 /* As of 23 February 2001, this code is open source and covered by the */
@@ -5,13 +8,8 @@
 
 package russotto.zplet.zmachine.zmachine5;
 
-import java.util.*;
-import java.awt.*;
-import java.net.*;
-import java.io.*;
-import java.applet.Applet;
-import russotto.zplet.zmachine.ZMachine;
 import russotto.zplet.zmachine.ZDictionary;
+import russotto.zplet.zmachine.ZMachine;
 
 public class ZDictionary5 extends ZDictionary{
 		ZMachine zm;
@@ -125,7 +123,6 @@
 		public void tokenise(int textloc, int textlength, int parseloc, boolean parseunknown) {
 				int wordloc, wordlength;
 				int textleft = textlength;
-				int dictloc;
 				char ch;
 				boolean pbfull;
 
diff -urbw zplet.20060707/src/russotto/zplet/zmachine/zmachine5/ZHeader5.java zplet.new/src/russotto/zplet/zmachine/zmachine5/ZHeader5.java
--- zplet.20060707/src/russotto/zplet/zmachine/zmachine5/ZHeader5.java	2001-02-26 11:18:18.000000000 -0800
+++ zplet.new/src/russotto/zplet/zmachine/zmachine5/ZHeader5.java	2007-11-15 11:36:56.000000000 -0800
@@ -1,3 +1,6 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
 /* Zplet, a Z-Machine interpreter in Java */
 /* Copyright 1996,2001 Matthew T. Russotto */
 /* As of 23 February 2001, this code is open source and covered by the */
@@ -5,11 +8,6 @@
 
 package russotto.zplet.zmachine.zmachine5;
 
-import java.util.*;
-import java.awt.*;
-import java.net.*;
-import java.io.*;
-import java.applet.Applet;
 import russotto.zplet.zmachine.ZHeader;
 
 class ZHeader5 extends ZHeader
diff -urbw zplet.20060707/src/russotto/zplet/zmachine/zmachine5/ZInstruction5.java zplet.new/src/russotto/zplet/zmachine/zmachine5/ZInstruction5.java
--- zplet.20060707/src/russotto/zplet/zmachine/zmachine5/ZInstruction5.java	2001-02-26 11:18:18.000000000 -0800
+++ zplet.new/src/russotto/zplet/zmachine/zmachine5/ZInstruction5.java	2007-11-16 00:37:42.000000000 -0800
@@ -1,3 +1,6 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
 /* Zplet, a Z-Machine interpreter in Java */
 /* Copyright 1996,2001 Matthew T. Russotto */
 /* As of 23 February 2001, this code is open source and covered by the */
@@ -5,15 +8,10 @@
 
 package russotto.zplet.zmachine.zmachine5;
 
-import java.util.*;
-import java.awt.*;
-import java.net.*;
-import java.io.*;
-import java.applet.Applet;
 import russotto.zplet.ZColor;
+import russotto.zplet.zmachine.ZFrameBound;
 import russotto.zplet.zmachine.ZInstruction;
 import russotto.zplet.zmachine.ZMachine;
-import russotto.zplet.zmachine.ZFrameBound;
 import russotto.zplet.zmachine.state.ZState;
 
 public class ZInstruction5 extends ZInstruction
@@ -852,7 +850,7 @@
 					ZState restore_state;
 					
 					restore_state = new ZState(zm);
-					if (restore_state.restore_from_disk(zm.screen.getFrame())) {
+					if (restore_state.restore_from_disk(zm.screen)) {
 						zm.restore(restore_state);
 						storevar = zm.get_code_byte();
 						return ZRESTORE_SUCCESS;
diff -urbw zplet.20060707/src/russotto/zplet/zmachine/zmachine5/ZMachine5.java zplet.new/src/russotto/zplet/zmachine/zmachine5/ZMachine5.java
--- zplet.20060707/src/russotto/zplet/zmachine/zmachine5/ZMachine5.java	2001-02-26 11:18:18.000000000 -0800
+++ zplet.new/src/russotto/zplet/zmachine/zmachine5/ZMachine5.java	2007-11-15 11:36:30.000000000 -0800
@@ -1,3 +1,6 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
 /* Zplet, a Z-Machine interpreter in Java */
 /* Copyright 1996,2001 Matthew T. Russotto */
 /* As of 23 February 2001, this code is open source and covered by the */
@@ -5,14 +8,9 @@
 
 package russotto.zplet.zmachine.zmachine5;
 
-import java.util.*;
-import java.awt.*;
-import java.net.*;
-import java.io.*;
-import java.applet.Applet;
-import russotto.zplet.zmachine.*;
 import russotto.zplet.screenmodel.ZScreen;
 import russotto.zplet.screenmodel.ZWindow;
+import russotto.zplet.zmachine.ZMachine;
 import russotto.zplet.zmachine.state.ZState;
 
 public class ZMachine5 extends ZMachine {
diff -urbw zplet.20060707/src/russotto/zplet/zmachine/zmachine5/ZMachine8.java zplet.new/src/russotto/zplet/zmachine/zmachine5/ZMachine8.java
--- zplet.20060707/src/russotto/zplet/zmachine/zmachine5/ZMachine8.java	2001-02-26 11:18:18.000000000 -0800
+++ zplet.new/src/russotto/zplet/zmachine/zmachine5/ZMachine8.java	2007-11-15 11:36:18.000000000 -0800
@@ -1,16 +1,12 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
 /* Zplet, a Z-Machine interpreter in Java */
 /* Copyright 1996,2001 Matthew T. Russotto */
 /* As of 23 February 2001, this code is open source and covered by the */
 /* Artistic License, found within this package */
 
 package russotto.zplet.zmachine.zmachine5;
-import russotto.zplet.zmachine.*;
-
-import java.util.*;
-import java.awt.*;
-import java.net.*;
-import java.io.*;
-import java.applet.Applet;
 import russotto.zplet.screenmodel.ZScreen;
 
 public class ZMachine8 extends ZMachine5 {
diff -urbw zplet.20060707/src/russotto/zplet/zmachine/zmachine5/ZObjectTree5.java zplet.new/src/russotto/zplet/zmachine/zmachine5/ZObjectTree5.java
--- zplet.20060707/src/russotto/zplet/zmachine/zmachine5/ZObjectTree5.java	2001-02-26 11:18:18.000000000 -0800
+++ zplet.new/src/russotto/zplet/zmachine/zmachine5/ZObjectTree5.java	2007-11-15 11:34:57.000000000 -0800
@@ -1,3 +1,6 @@
+/* This file was modified from the original source, please see the
+ * zplet.patch file included at the top of this source tree.
+ */
 /* Zplet, a Z-Machine interpreter in Java */
 /* Copyright 1996,2001 Matthew T. Russotto */
 /* As of 23 February 2001, this code is open source and covered by the */
@@ -5,11 +8,6 @@
 
 package russotto.zplet.zmachine.zmachine5;
 
-import java.util.*;
-import java.awt.*;
-import java.net.*;
-import java.io.*;
-import java.applet.Applet;
 import russotto.zplet.zmachine.ZMachine;
 import russotto.zplet.zmachine.ZObjectTree;
 
@@ -148,8 +146,6 @@
 
 		public short prop_address(short object, short propnum) {
 				int entry_address = prop_entry_address(object, propnum);
-				int sizebyte;
-
 				if (entry_address == 0)
 						return 0;
 				if ((zm.memory_image[entry_address]&0x80) == 0x80)
